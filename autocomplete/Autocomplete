import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

import java.util.Arrays;
import java.util.Comparator;

public class Autocomplete {
    private Term[] sorted; // array for sorted terms

    // Initializes the data structure from the given array of terms.
    public Autocomplete(Term[] terms) {
        if (terms == (null)) throw new IllegalArgumentException("array is null");
        for (int i = 0; i < terms.length; i++) {
            if (terms[i] == null)
                throw new IllegalArgumentException("entry is null");
        }
        sorted = new Term[terms.length];
        // to ensure immutability
        for (int i = 0; i < terms.length; i++) {
            sorted[i] = terms[i];
        }
        Arrays.sort(sorted);
    }

    // Returns all terms that start with the given prefix,
    // in descending order of weight.
    public Term[] allMatches(String prefix) {
        if (prefix == null)
            throw new IllegalArgumentException("Argument is null");
        Comparator<Term> comparator = Term.byPrefixOrder(prefix.length());
        Term answer = new Term(prefix, 0);

        // make sure it is immutable by making a copy
        Term[] duplicate = new Term[sorted.length];
        for (int i = 0; i < duplicate.length; i++) {
            duplicate[i] = sorted[i];
        }
        int first = BinarySearchDeluxe.firstIndexOf(duplicate, answer, comparator);
        int last = BinarySearchDeluxe.lastIndexOf(duplicate, answer, comparator);

        // returns empty Term array if no matching terms found
        if (first == -1 || last == -1) {
            Term[] match = new Term[0];
            return match;
        }

        Term[] match = new Term[last - first + 1];

        // copies matching terms over to array
        for (int i = first; i <= last; i++) {
            match[i - first] = duplicate[i];
        }

        Comparator<Term> weighted = Term.byReverseWeightOrder();

        Arrays.sort(match, weighted);

        return match;
    }

    // Returns the number of terms that start with the given prefix.
    public int numberOfMatches(String prefix) {
        if (prefix == null)
            throw new IllegalArgumentException("Argument is null");
        Comparator<Term> comparator = Term.byPrefixOrder(prefix.length());
        Term[] copy = new Term[sorted.length]; // maintain immutability
        for (int i = 0; i < sorted.length; i++)
            copy[i] = sorted[i];
        Term prefixTermVers = new Term(prefix, 0);
        int first = BinarySearchDeluxe.
                firstIndexOf(copy, prefixTermVers, comparator);
        if (first < 0)
            return 0; // return 0 if no matching term found
        int last = BinarySearchDeluxe.
                lastIndexOf(copy, prefixTermVers, comparator);
        return last - first + 1;
    }

    // unit testing (required)
    public static void main(String[] args) {
        String filename = args[0];
        In in = new In(filename);
        int n = in.readInt();
        Term[] terms = new Term[n];
        for (int i = 0; i < n; i++) {
            long weight = in.readLong();           // read the next weight
            in.readChar();                         // scan past the tab
            String query = in.readLine();          // read the next query
            terms[i] = new Term(query, weight);    // construct the term
        }

        // read in queries from standard input
        // and print the top k matching terms
        int k = Integer.parseInt(args[1]);
        Autocomplete autocomplete = new Autocomplete(terms);
        while (StdIn.hasNextLine()) {
            String prefix = StdIn.readLine();
            Term[] results = autocomplete.allMatches(prefix);
            StdOut.printf("%d matches\n", autocomplete.numberOfMatches(prefix));
            for (int i = 0; i < Math.min(k, results.length); i++)
                StdOut.println(results[i]);
        }
    }

}
