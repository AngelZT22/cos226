import edu.princeton.cs.algs4.StdOut;

import java.util.Iterator;
import java.util.NoSuchElementException;

// Adapted from code written by Robert Sedgewick and Kevin Wayne in 2019:
// https://algs4.cs.princeton.edu/13stacks/LinkedStack.java.html
public class Deque<Item> implements Iterable<Item> {
    private Node first; // points to first element in linked list
    private Node last; // points to last element in linked list
    private int size; // size of deque

    private class Node {
        private Item item; // item of Node
        private Node next; // points to next Node
        private Node prev; // points to previous Node
    }

    // constructs an empty deque
    public Deque() {
        first = null;
        last = null;
        size = 0;
    }

    // is the deque empty?
    public boolean isEmpty() {
        return size == 0;
    }

    // return the number of items on the deque
    public int size() {
        return size;
    }

    // add the item to the front
    public void addFirst(Item item) {
        if (item == null)
            throw new IllegalArgumentException("Illegal argument");
        Node oldFirst = first;
        first = new Node();
        first.item = item;
        first.next = oldFirst;
        first.prev = null;
        if (isEmpty())
            last = first;
        else
            oldFirst.prev = first;
        size++;
    }

    // add the item to the back
    public void addLast(Item item) {
        if (item == null)
            throw new IllegalArgumentException("Illegal argument");
        Node oldLast = last;
        last = new Node();
        last.item = item;
        last.next = null;
        last.prev = oldLast;
        if (isEmpty())
            first = last;
        else
            oldLast.next = last;
        size++;
    }

    // remove and return the item from the front
    public Item removeFirst() {
        if (isEmpty())
            throw new NoSuchElementException("Deque is empty");
        size--;
        Item oldFirst = first.item;
        first = first.next;
        if (first != null)
            first.prev = null;
        else
            last = first;
        return oldFirst;
    }

    // remove and return the item from the back
    public Item removeLast() {
        if (isEmpty())
            throw new NoSuchElementException("Deque is empty");
        size--;
        Item oldLast = last.item;
        last = last.prev;
        if (last != null)
            last.next = null;
        else
            first = last;
        return oldLast;
    }

    // return an iterator over items in order from front to back
    public Iterator<Item> iterator() {
        return new LinkedIterator();
    }

    private class LinkedIterator implements Iterator<Item> {
        private Node current = first; // current Node

        public boolean hasNext() {
            return current != null;
        }

        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            Item item = current.item;
            current = current.next;
            return item;
        }

    }

    // unit testing (required)
    public static void main(String[] args) {
        Deque<Double> test = new Deque<Double>();
        test.addFirst(2.5);
        test.addLast(2.6);
        Iterator<Double> iterator = test.iterator();
        while (iterator.hasNext()) {
            StdOut.println(iterator.next());
        }
        StdOut.println(test.size());
        test.removeFirst();
        test.removeLast();
        StdOut.println(test.isEmpty());
    }
}
